// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-search-reindex-api/api"
	"github.com/ONSdigital/dp-search-reindex-api/models"
	"github.com/ONSdigital/dp-search-reindex-api/mongo"
	"github.com/globalsign/mgo/bson"
	"sync"
)

var (
	lockDataStorerMockAcquireJobLock              sync.RWMutex
	lockDataStorerMockCheckNewReindexCanBeCreated sync.RWMutex
	lockDataStorerMockCreateJob                   sync.RWMutex
	lockDataStorerMockCreateTask                  sync.RWMutex
	lockDataStorerMockGetJob                      sync.RWMutex
	lockDataStorerMockGetJobs                     sync.RWMutex
	lockDataStorerMockGetTask                     sync.RWMutex
	lockDataStorerMockGetTasks                    sync.RWMutex
	lockDataStorerMockPutNumberOfTasks            sync.RWMutex
	lockDataStorerMockUnlockJob                   sync.RWMutex
	lockDataStorerMockUpdateJob                   sync.RWMutex
)

// Ensure, that DataStorerMock does implement DataStorer.
// If this is not the case, regenerate this file with moq.
var _ api.DataStorer = &DataStorerMock{}

// DataStorerMock is a mock implementation of api.DataStorer.
//
//     func TestSomethingThatUsesDataStorer(t *testing.T) {
//
//         // make and configure a mocked api.DataStorer
//         mockedDataStorer := &DataStorerMock{
//             AcquireJobLockFunc: func(ctx context.Context, id string) (string, error) {
// 	               panic("mock out the AcquireJobLock method")
//             },
//             CheckNewReindexCanBeCreatedFunc: func(ctx context.Context) error {
// 	               panic("mock out the CheckNewReindexCanBeCreated method")
//             },
//             CreateJobFunc: func(ctx context.Context, searchIndexName string) (*models.Job, error) {
// 	               panic("mock out the CreateJob method")
//             },
//             CreateTaskFunc: func(ctx context.Context, jobID string, taskName string, numDocuments int) (models.Task, error) {
// 	               panic("mock out the CreateTask method")
//             },
//             GetJobFunc: func(ctx context.Context, id string) (models.Job, error) {
// 	               panic("mock out the GetJob method")
//             },
//             GetJobsFunc: func(ctx context.Context, options mongo.Options) (models.Jobs, error) {
// 	               panic("mock out the GetJobs method")
//             },
//             GetTaskFunc: func(ctx context.Context, jobID string, taskName string) (models.Task, error) {
// 	               panic("mock out the GetTask method")
//             },
//             GetTasksFunc: func(ctx context.Context, options mongo.Options, jobID string) (models.Tasks, error) {
// 	               panic("mock out the GetTasks method")
//             },
//             PutNumberOfTasksFunc: func(ctx context.Context, id string, count int) error {
// 	               panic("mock out the PutNumberOfTasks method")
//             },
//             UnlockJobFunc: func(lockID string)  {
// 	               panic("mock out the UnlockJob method")
//             },
//             UpdateJobFunc: func(ctx context.Context, id string, updates bson.M) error {
// 	               panic("mock out the UpdateJob method")
//             },
//         }
//
//         // use mockedDataStorer in code that requires api.DataStorer
//         // and then make assertions.
//
//     }
type DataStorerMock struct {
	// AcquireJobLockFunc mocks the AcquireJobLock method.
	AcquireJobLockFunc func(ctx context.Context, id string) (string, error)

	// CheckNewReindexCanBeCreatedFunc mocks the CheckNewReindexCanBeCreated method.
	CheckNewReindexCanBeCreatedFunc func(ctx context.Context) error

	// CreateJobFunc mocks the CreateJob method.
	CreateJobFunc func(ctx context.Context, searchIndexName string) (*models.Job, error)

	// CreateTaskFunc mocks the CreateTask method.
	CreateTaskFunc func(ctx context.Context, jobID string, taskName string, numDocuments int) (models.Task, error)

	// GetJobFunc mocks the GetJob method.
	GetJobFunc func(ctx context.Context, id string) (models.Job, error)

	// GetJobsFunc mocks the GetJobs method.
	GetJobsFunc func(ctx context.Context, options mongo.Options) (models.Jobs, error)

	// GetTaskFunc mocks the GetTask method.
	GetTaskFunc func(ctx context.Context, jobID string, taskName string) (models.Task, error)

	// GetTasksFunc mocks the GetTasks method.
	GetTasksFunc func(ctx context.Context, options mongo.Options, jobID string) (models.Tasks, error)

	// PutNumberOfTasksFunc mocks the PutNumberOfTasks method.
	PutNumberOfTasksFunc func(ctx context.Context, id string, count int) error

	// UnlockJobFunc mocks the UnlockJob method.
	UnlockJobFunc func(lockID string)

	// UpdateJobFunc mocks the UpdateJob method.
	UpdateJobFunc func(ctx context.Context, id string, updates bson.M) error

	// calls tracks calls to the methods.
	calls struct {
		// AcquireJobLock holds details about calls to the AcquireJobLock method.
		AcquireJobLock []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// CheckNewReindexCanBeCreated holds details about calls to the CheckNewReindexCanBeCreated method.
		CheckNewReindexCanBeCreated []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// CreateJob holds details about calls to the CreateJob method.
		CreateJob []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SearchIndexName is the searchIndexName argument value.
			SearchIndexName string
		}
		// CreateTask holds details about calls to the CreateTask method.
		CreateTask []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// JobID is the jobID argument value.
			JobID string
			// TaskName is the taskName argument value.
			TaskName string
			// NumDocuments is the numDocuments argument value.
			NumDocuments int
		}
		// GetJob holds details about calls to the GetJob method.
		GetJob []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetJobs holds details about calls to the GetJobs method.
		GetJobs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Options is the options argument value.
			Options mongo.Options
		}
		// GetTask holds details about calls to the GetTask method.
		GetTask []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// JobID is the jobID argument value.
			JobID string
			// TaskName is the taskName argument value.
			TaskName string
		}
		// GetTasks holds details about calls to the GetTasks method.
		GetTasks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Options is the options argument value.
			Options mongo.Options
			// JobID is the jobID argument value.
			JobID string
		}
		// PutNumberOfTasks holds details about calls to the PutNumberOfTasks method.
		PutNumberOfTasks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// Count is the count argument value.
			Count int
		}
		// UnlockJob holds details about calls to the UnlockJob method.
		UnlockJob []struct {
			// LockID is the lockID argument value.
			LockID string
		}
		// UpdateJob holds details about calls to the UpdateJob method.
		UpdateJob []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// Updates is the updates argument value.
			Updates bson.M
		}
	}
}

// AcquireJobLock calls AcquireJobLockFunc.
func (mock *DataStorerMock) AcquireJobLock(ctx context.Context, id string) (string, error) {
	if mock.AcquireJobLockFunc == nil {
		panic("DataStorerMock.AcquireJobLockFunc: method is nil but DataStorer.AcquireJobLock was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	lockDataStorerMockAcquireJobLock.Lock()
	mock.calls.AcquireJobLock = append(mock.calls.AcquireJobLock, callInfo)
	lockDataStorerMockAcquireJobLock.Unlock()
	return mock.AcquireJobLockFunc(ctx, id)
}

// AcquireJobLockCalls gets all the calls that were made to AcquireJobLock.
// Check the length with:
//     len(mockedDataStorer.AcquireJobLockCalls())
func (mock *DataStorerMock) AcquireJobLockCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	lockDataStorerMockAcquireJobLock.RLock()
	calls = mock.calls.AcquireJobLock
	lockDataStorerMockAcquireJobLock.RUnlock()
	return calls
}

// CheckNewReindexCanBeCreated calls CheckNewReindexCanBeCreatedFunc.
func (mock *DataStorerMock) CheckNewReindexCanBeCreated(ctx context.Context) error {
	if mock.CheckNewReindexCanBeCreatedFunc == nil {
		panic("DataStorerMock.CheckNewReindexCanBeCreatedFunc: method is nil but DataStorer.CheckNewReindexCanBeCreated was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockDataStorerMockCheckNewReindexCanBeCreated.Lock()
	mock.calls.CheckNewReindexCanBeCreated = append(mock.calls.CheckNewReindexCanBeCreated, callInfo)
	lockDataStorerMockCheckNewReindexCanBeCreated.Unlock()
	return mock.CheckNewReindexCanBeCreatedFunc(ctx)
}

// CheckNewReindexCanBeCreatedCalls gets all the calls that were made to CheckNewReindexCanBeCreated.
// Check the length with:
//     len(mockedDataStorer.CheckNewReindexCanBeCreatedCalls())
func (mock *DataStorerMock) CheckNewReindexCanBeCreatedCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockDataStorerMockCheckNewReindexCanBeCreated.RLock()
	calls = mock.calls.CheckNewReindexCanBeCreated
	lockDataStorerMockCheckNewReindexCanBeCreated.RUnlock()
	return calls
}

// CreateJob calls CreateJobFunc.
func (mock *DataStorerMock) CreateJob(ctx context.Context, searchIndexName string) (*models.Job, error) {
	if mock.CreateJobFunc == nil {
		panic("DataStorerMock.CreateJobFunc: method is nil but DataStorer.CreateJob was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		SearchIndexName string
	}{
		Ctx:             ctx,
		SearchIndexName: searchIndexName,
	}
	lockDataStorerMockCreateJob.Lock()
	mock.calls.CreateJob = append(mock.calls.CreateJob, callInfo)
	lockDataStorerMockCreateJob.Unlock()
	return mock.CreateJobFunc(ctx, searchIndexName)
}

// CreateJobCalls gets all the calls that were made to CreateJob.
// Check the length with:
//     len(mockedDataStorer.CreateJobCalls())
func (mock *DataStorerMock) CreateJobCalls() []struct {
	Ctx             context.Context
	SearchIndexName string
} {
	var calls []struct {
		Ctx             context.Context
		SearchIndexName string
	}
	lockDataStorerMockCreateJob.RLock()
	calls = mock.calls.CreateJob
	lockDataStorerMockCreateJob.RUnlock()
	return calls
}

// CreateTask calls CreateTaskFunc.
func (mock *DataStorerMock) CreateTask(ctx context.Context, jobID string, taskName string, numDocuments int) (models.Task, error) {
	if mock.CreateTaskFunc == nil {
		panic("DataStorerMock.CreateTaskFunc: method is nil but DataStorer.CreateTask was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		JobID        string
		TaskName     string
		NumDocuments int
	}{
		Ctx:          ctx,
		JobID:        jobID,
		TaskName:     taskName,
		NumDocuments: numDocuments,
	}
	lockDataStorerMockCreateTask.Lock()
	mock.calls.CreateTask = append(mock.calls.CreateTask, callInfo)
	lockDataStorerMockCreateTask.Unlock()
	return mock.CreateTaskFunc(ctx, jobID, taskName, numDocuments)
}

// CreateTaskCalls gets all the calls that were made to CreateTask.
// Check the length with:
//     len(mockedDataStorer.CreateTaskCalls())
func (mock *DataStorerMock) CreateTaskCalls() []struct {
	Ctx          context.Context
	JobID        string
	TaskName     string
	NumDocuments int
} {
	var calls []struct {
		Ctx          context.Context
		JobID        string
		TaskName     string
		NumDocuments int
	}
	lockDataStorerMockCreateTask.RLock()
	calls = mock.calls.CreateTask
	lockDataStorerMockCreateTask.RUnlock()
	return calls
}

// GetJob calls GetJobFunc.
func (mock *DataStorerMock) GetJob(ctx context.Context, id string) (models.Job, error) {
	if mock.GetJobFunc == nil {
		panic("DataStorerMock.GetJobFunc: method is nil but DataStorer.GetJob was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	lockDataStorerMockGetJob.Lock()
	mock.calls.GetJob = append(mock.calls.GetJob, callInfo)
	lockDataStorerMockGetJob.Unlock()
	return mock.GetJobFunc(ctx, id)
}

// GetJobCalls gets all the calls that were made to GetJob.
// Check the length with:
//     len(mockedDataStorer.GetJobCalls())
func (mock *DataStorerMock) GetJobCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	lockDataStorerMockGetJob.RLock()
	calls = mock.calls.GetJob
	lockDataStorerMockGetJob.RUnlock()
	return calls
}

// GetJobs calls GetJobsFunc.
func (mock *DataStorerMock) GetJobs(ctx context.Context, options mongo.Options) (models.Jobs, error) {
	if mock.GetJobsFunc == nil {
		panic("DataStorerMock.GetJobsFunc: method is nil but DataStorer.GetJobs was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Options mongo.Options
	}{
		Ctx:     ctx,
		Options: options,
	}
	lockDataStorerMockGetJobs.Lock()
	mock.calls.GetJobs = append(mock.calls.GetJobs, callInfo)
	lockDataStorerMockGetJobs.Unlock()
	return mock.GetJobsFunc(ctx, options)
}

// GetJobsCalls gets all the calls that were made to GetJobs.
// Check the length with:
//     len(mockedDataStorer.GetJobsCalls())
func (mock *DataStorerMock) GetJobsCalls() []struct {
	Ctx     context.Context
	Options mongo.Options
} {
	var calls []struct {
		Ctx     context.Context
		Options mongo.Options
	}
	lockDataStorerMockGetJobs.RLock()
	calls = mock.calls.GetJobs
	lockDataStorerMockGetJobs.RUnlock()
	return calls
}

// GetTask calls GetTaskFunc.
func (mock *DataStorerMock) GetTask(ctx context.Context, jobID string, taskName string) (models.Task, error) {
	if mock.GetTaskFunc == nil {
		panic("DataStorerMock.GetTaskFunc: method is nil but DataStorer.GetTask was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		JobID    string
		TaskName string
	}{
		Ctx:      ctx,
		JobID:    jobID,
		TaskName: taskName,
	}
	lockDataStorerMockGetTask.Lock()
	mock.calls.GetTask = append(mock.calls.GetTask, callInfo)
	lockDataStorerMockGetTask.Unlock()
	return mock.GetTaskFunc(ctx, jobID, taskName)
}

// GetTaskCalls gets all the calls that were made to GetTask.
// Check the length with:
//     len(mockedDataStorer.GetTaskCalls())
func (mock *DataStorerMock) GetTaskCalls() []struct {
	Ctx      context.Context
	JobID    string
	TaskName string
} {
	var calls []struct {
		Ctx      context.Context
		JobID    string
		TaskName string
	}
	lockDataStorerMockGetTask.RLock()
	calls = mock.calls.GetTask
	lockDataStorerMockGetTask.RUnlock()
	return calls
}

// GetTasks calls GetTasksFunc.
func (mock *DataStorerMock) GetTasks(ctx context.Context, options mongo.Options, jobID string) (models.Tasks, error) {
	if mock.GetTasksFunc == nil {
		panic("DataStorerMock.GetTasksFunc: method is nil but DataStorer.GetTasks was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Options mongo.Options
		JobID   string
	}{
		Ctx:     ctx,
		Options: options,
		JobID:   jobID,
	}
	lockDataStorerMockGetTasks.Lock()
	mock.calls.GetTasks = append(mock.calls.GetTasks, callInfo)
	lockDataStorerMockGetTasks.Unlock()
	return mock.GetTasksFunc(ctx, options, jobID)
}

// GetTasksCalls gets all the calls that were made to GetTasks.
// Check the length with:
//     len(mockedDataStorer.GetTasksCalls())
func (mock *DataStorerMock) GetTasksCalls() []struct {
	Ctx     context.Context
	Options mongo.Options
	JobID   string
} {
	var calls []struct {
		Ctx     context.Context
		Options mongo.Options
		JobID   string
	}
	lockDataStorerMockGetTasks.RLock()
	calls = mock.calls.GetTasks
	lockDataStorerMockGetTasks.RUnlock()
	return calls
}

// PutNumberOfTasks calls PutNumberOfTasksFunc.
func (mock *DataStorerMock) PutNumberOfTasks(ctx context.Context, id string, count int) error {
	if mock.PutNumberOfTasksFunc == nil {
		panic("DataStorerMock.PutNumberOfTasksFunc: method is nil but DataStorer.PutNumberOfTasks was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		ID    string
		Count int
	}{
		Ctx:   ctx,
		ID:    id,
		Count: count,
	}
	lockDataStorerMockPutNumberOfTasks.Lock()
	mock.calls.PutNumberOfTasks = append(mock.calls.PutNumberOfTasks, callInfo)
	lockDataStorerMockPutNumberOfTasks.Unlock()
	return mock.PutNumberOfTasksFunc(ctx, id, count)
}

// PutNumberOfTasksCalls gets all the calls that were made to PutNumberOfTasks.
// Check the length with:
//     len(mockedDataStorer.PutNumberOfTasksCalls())
func (mock *DataStorerMock) PutNumberOfTasksCalls() []struct {
	Ctx   context.Context
	ID    string
	Count int
} {
	var calls []struct {
		Ctx   context.Context
		ID    string
		Count int
	}
	lockDataStorerMockPutNumberOfTasks.RLock()
	calls = mock.calls.PutNumberOfTasks
	lockDataStorerMockPutNumberOfTasks.RUnlock()
	return calls
}

// UnlockJob calls UnlockJobFunc.
func (mock *DataStorerMock) UnlockJob(lockID string) {
	if mock.UnlockJobFunc == nil {
		panic("DataStorerMock.UnlockJobFunc: method is nil but DataStorer.UnlockJob was just called")
	}
	callInfo := struct {
		LockID string
	}{
		LockID: lockID,
	}
	lockDataStorerMockUnlockJob.Lock()
	mock.calls.UnlockJob = append(mock.calls.UnlockJob, callInfo)
	lockDataStorerMockUnlockJob.Unlock()
	mock.UnlockJobFunc(lockID)
}

// UnlockJobCalls gets all the calls that were made to UnlockJob.
// Check the length with:
//     len(mockedDataStorer.UnlockJobCalls())
func (mock *DataStorerMock) UnlockJobCalls() []struct {
	LockID string
} {
	var calls []struct {
		LockID string
	}
	lockDataStorerMockUnlockJob.RLock()
	calls = mock.calls.UnlockJob
	lockDataStorerMockUnlockJob.RUnlock()
	return calls
}

// UpdateJob calls UpdateJobFunc.
func (mock *DataStorerMock) UpdateJob(ctx context.Context, id string, updates bson.M) error {
	if mock.UpdateJobFunc == nil {
		panic("DataStorerMock.UpdateJobFunc: method is nil but DataStorer.UpdateJob was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		ID      string
		Updates bson.M
	}{
		Ctx:     ctx,
		ID:      id,
		Updates: updates,
	}
	lockDataStorerMockUpdateJob.Lock()
	mock.calls.UpdateJob = append(mock.calls.UpdateJob, callInfo)
	lockDataStorerMockUpdateJob.Unlock()
	return mock.UpdateJobFunc(ctx, id, updates)
}

// UpdateJobCalls gets all the calls that were made to UpdateJob.
// Check the length with:
//     len(mockedDataStorer.UpdateJobCalls())
func (mock *DataStorerMock) UpdateJobCalls() []struct {
	Ctx     context.Context
	ID      string
	Updates bson.M
} {
	var calls []struct {
		Ctx     context.Context
		ID      string
		Updates bson.M
	}
	lockDataStorerMockUpdateJob.RLock()
	calls = mock.calls.UpdateJob
	lockDataStorerMockUpdateJob.RUnlock()
	return calls
}
