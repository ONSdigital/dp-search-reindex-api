// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"errors"
	"sync"

	"github.com/ONSdigital/dp-search-reindex-api/api"
	"github.com/ONSdigital/dp-search-reindex-api/models"
)

var (
	lockMongoServerMockAcquireJobLock sync.RWMutex
	lockMongoServerMockUnlockJob      sync.RWMutex
)

// Ensure, that JobStorerMock does implement api.JobStorer.
// If this is not the case, regenerate this file with moq.
var _ api.JobStorer = &JobStorerMock{}

// JobStorerMock is a mock implementation of api.JobStorer.
//
// 	func TestSomethingThatUsesJobStorer(t *testing.T) {
//
// 		// make and configure a mocked api.JobStorer
// 		mockedJobStorer := &JobStorerMock{
// 			AcquireJobLockFunc: func(ctx context.Context, id string) (string, error) {
// 				panic("mock out the AcquireJobLock method")
// 			},
// 			CreateJobFunc: func(ctx context.Context, id string) (models.Job, error) {
// 				panic("mock out the CreateJob method")
// 			},
// 			GetJobFunc: func(ctx context.Context, id string) (models.Job, error) {
// 				panic("mock out the GetJob method")
// 			},
// 			GetJobsFunc: func(ctx context.Context, offsetParam string, limitParam string) (models.Jobs, error) {
// 				panic("mock out the GetJobs method")
// 			},
// 			PutNumberOfTasksFunc: func(ctx context.Context, id string, count int) error {
// 				panic("mock out the PutNumberOfTasks method")
// 			},
// 			UnlockJobFunc: func(lockID string) error {
// 				panic("mock out the UnlockJob method")
// 			},
// 		}
//
// 		// use mockedJobStorer in code that requires api.JobStorer
// 		// and then make assertions.
//
// 	}
type JobStorerMock struct {
	// AcquireJobLockFunc mocks the AcquireJobLock method.
	AcquireJobLockFunc func(ctx context.Context, id string) (string, error)

	// CreateJobFunc mocks the CreateJob method.
	CreateJobFunc func(ctx context.Context, id string) (models.Job, error)

	// GetJobFunc mocks the GetJob method.
	GetJobFunc func(ctx context.Context, id string) (models.Job, error)

	// GetJobsFunc mocks the GetJobs method.
	GetJobsFunc func(ctx context.Context, offsetParam string, limitParam string) (models.Jobs, error)

	// PutNumberOfTasksFunc mocks the PutNumberOfTasks method.
	PutNumberOfTasksFunc func(ctx context.Context, id string, count int) error

	// UnlockJobFunc mocks the UnlockJob method.
	UnlockJobFunc func(lockID string) error

	// calls tracks calls to the methods.
	calls struct {
		// AcquireJobLock holds details about calls to the AcquireJobLock method.
		AcquireJobLock []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// CreateJob holds details about calls to the CreateJob method.
		CreateJob []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetJob holds details about calls to the GetJob method.
		GetJob []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetJobs holds details about calls to the GetJobs method.
		GetJobs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// OffsetParam is the offsetParam argument value.
			OffsetParam string
			// LimitParam is the limitParam argument value.
			LimitParam string
		}
		// PutNumberOfTasks holds details about calls to the PutNumberOfTasks method.
		PutNumberOfTasks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// Count is the count argument value.
			Count int
		}
		// UnlockJob holds details about calls to the UnlockJob method.
		UnlockJob []struct {
			// LockID is the lockID argument value.
			LockID string
		}
	}
	lockAcquireJobLock   sync.RWMutex
	lockCreateJob        sync.RWMutex
	lockGetJob           sync.RWMutex
	lockGetJobs          sync.RWMutex
	lockPutNumberOfTasks sync.RWMutex
	lockUnlockJob        sync.RWMutex
}

// Constants for testing
const (
	notFoundID        = "NOT_FOUND_UUID"
	duplicateID       = "DUPLICATE_UUID"
	jobUpdatedFirstID = "JOB_UPDATED_FIRST_ID"
	jobUpdatedLastID  = "JOB_UPDATED_LAST_ID"
)

// AcquireJobLock calls AcquireJobLockFunc.
func (mock *JobStorerMock) AcquireJobLock(ctx context.Context, id string) (string, error) {
	if mock.AcquireJobLockFunc == nil {
		return "", nil
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	lockMongoServerMockAcquireJobLock.Lock()
	mock.calls.AcquireJobLock = append(mock.calls.AcquireJobLock, callInfo)
	lockMongoServerMockAcquireJobLock.Unlock()
	return mock.AcquireJobLockFunc(ctx, id)
}

// AcquireJobLockCalls gets all the calls that were made to AcquireJobLock.
// Check the length with:
//     len(mockedJobStorer.AcquireJobLockCalls())
func (mock *JobStorerMock) AcquireJobLockCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockAcquireJobLock.RLock()
	calls = mock.calls.AcquireJobLock
	mock.lockAcquireJobLock.RUnlock()
	return calls
}

// CreateJob calls CreateJobFunc.
func (mock *JobStorerMock) CreateJob(ctx context.Context, id string) (job models.Job, err error) {
	if mock.CreateJobFunc == nil {
		if id == "" {
			return models.Job{}, errors.New("id must not be an empty string")
		} else if id == duplicateID {
			return models.Job{}, errors.New("id must be unique")
		} else {
			return models.NewJob(id), nil
		}
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.calls.CreateJob = append(mock.calls.CreateJob, callInfo)
	return mock.CreateJobFunc(ctx, id)
}

// CreateJobCalls gets all the calls that were made to CreateJob.
// Check the length with:
//     len(mockedJobStorer.CreateJobCalls())
func (mock *JobStorerMock) CreateJobCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockCreateJob.RLock()
	calls = mock.calls.CreateJob
	mock.lockCreateJob.RUnlock()
	return calls
}

// GetJob calls GetJobFunc.
func (mock *JobStorerMock) GetJob(ctx context.Context, id string) (job models.Job, err error) {
	if mock.GetJobFunc == nil {
		if id == "" {
			return models.Job{}, errors.New("id must not be an empty string")
		} else if id == notFoundID {
			return models.Job{}, errors.New("the jobs collection does not contain the job id entered")
		} else {
			return models.NewJob(id), nil
		}
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.calls.GetJob = append(mock.calls.GetJob, callInfo)
	return mock.GetJobFunc(ctx, id)
}

// GetJobCalls gets all the calls that were made to GetJob.
// Check the length with:
//     len(mockedJobStorer.GetJobCalls())
func (mock *JobStorerMock) GetJobCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetJob.RLock()
	calls = mock.calls.GetJob
	mock.lockGetJob.RUnlock()
	return calls
}

// GetJobs calls GetJobsFunc.
func (mock *JobStorerMock) GetJobs(ctx context.Context, offsetParam string, limitParam string) (job models.Jobs, err error) {
	if mock.GetJobsFunc == nil {
		results := models.Jobs{}
		jobs := make([]models.Job, 2)
		jobs[0] = models.NewJob(jobUpdatedFirstID)
		jobs[1] = models.NewJob(jobUpdatedLastID)
		results.JobList = jobs
		return results, nil
	}
	callInfo := struct {
		Ctx context.Context
		OffsetParam string
		LimitParam string
	}{
		Ctx: ctx,
		OffsetParam: offsetParam,
		LimitParam: limitParam,
	}
	mock.calls.GetJobs = append(mock.calls.GetJobs, callInfo)
	return mock.GetJobsFunc(ctx, offsetParam, limitParam)
}

// GetJobsCalls gets all the calls that were made to GetJobs.
// Check the length with:
//     len(mockedJobStorer.GetJobsCalls())
func (mock *JobStorerMock) GetJobsCalls() []struct {
	Ctx context.Context
	OffsetParam string
	LimitParam string
} {
	var calls []struct {
		Ctx context.Context
		OffsetParam string
		LimitParam string
	}
	mock.lockGetJobs.RLock()
	calls = mock.calls.GetJobs
	mock.lockGetJobs.RUnlock()
	return calls
}

// PutNumberOfTasks calls PutNumberOfTasksFunc.
func (mock *JobStorerMock) PutNumberOfTasks(ctx context.Context, id string, count int) error {
	if mock.PutNumberOfTasksFunc == nil {
		panic("JobStorerMock.PutNumberOfTasksFunc: method is nil but JobStorer.PutNumberOfTasks was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		ID    string
		Count int
	}{
		Ctx:   ctx,
		ID:    id,
		Count: count,
	}
	mock.lockPutNumberOfTasks.Lock()
	mock.calls.PutNumberOfTasks = append(mock.calls.PutNumberOfTasks, callInfo)
	mock.lockPutNumberOfTasks.Unlock()
	return mock.PutNumberOfTasksFunc(ctx, id, count)
}

// PutNumberOfTasksCalls gets all the calls that were made to PutNumberOfTasks.
// Check the length with:
//     len(mockedJobStorer.PutNumberOfTasksCalls())
func (mock *JobStorerMock) PutNumberOfTasksCalls() []struct {
	Ctx   context.Context
	ID    string
	Count int
} {
	var calls []struct {
		Ctx   context.Context
		ID    string
		Count int
	}
	mock.lockPutNumberOfTasks.RLock()
	calls = mock.calls.PutNumberOfTasks
	mock.lockPutNumberOfTasks.RUnlock()
	return calls
}

// UnlockJob calls UnlockJobFunc.
func (mock *JobStorerMock) UnlockJob(lockID string) error {
	if mock.UnlockJobFunc == nil {
		return nil
	}
	callInfo := struct {
		LockID string
	}{
		LockID: lockID,
	}
	lockMongoServerMockUnlockJob.Lock()
	mock.calls.UnlockJob = append(mock.calls.UnlockJob, callInfo)
	lockMongoServerMockUnlockJob.Unlock()
	return mock.UnlockJobFunc(lockID)
}

// UnlockJobCalls gets all the calls that were made to UnlockJob.
// Check the length with:
//     len(mockedJobStorer.UnlockJobCalls())
func (mock *JobStorerMock) UnlockJobCalls() []struct {
	LockID string
} {
	var calls []struct {
		LockID string
	}
	mock.lockUnlockJob.RLock()
	calls = mock.calls.UnlockJob
	mock.lockUnlockJob.RUnlock()
	return calls
}
