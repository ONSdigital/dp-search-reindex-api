// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"github.com/ONSdigital/dp-search-reindex-api/models"
	"github.com/ONSdigital/dp-search-reindex-api/service"
	"sync"
)

var (
	lockKafkaProducerMockChecker                 sync.RWMutex
	lockKafkaProducerMockClose                   sync.RWMutex
	lockKafkaProducerMockProduceReindexRequested sync.RWMutex
)

// Ensure, that KafkaProducerMock does implement KafkaProducer.
// If this is not the case, regenerate this file with moq.
var _ service.KafkaProducer = &KafkaProducerMock{}

// KafkaProducerMock is a mock implementation of service.KafkaProducer.
//
//     func TestSomethingThatUsesKafkaProducer(t *testing.T) {
//
//         // make and configure a mocked service.KafkaProducer
//         mockedKafkaProducer := &KafkaProducerMock{
//             CheckerFunc: func(ctx context.Context, state *healthcheck.CheckState) error {
// 	               panic("mock out the Checker method")
//             },
//             CloseFunc: func(ctx context.Context) error {
// 	               panic("mock out the Close method")
//             },
//             ProduceReindexRequestedFunc: func(ctx context.Context, event models.ReindexRequested) error {
// 	               panic("mock out the ProduceReindexRequested method")
//             },
//         }
//
//         // use mockedKafkaProducer in code that requires service.KafkaProducer
//         // and then make assertions.
//
//     }
type KafkaProducerMock struct {
	// CheckerFunc mocks the Checker method.
	CheckerFunc func(ctx context.Context, state *healthcheck.CheckState) error

	// CloseFunc mocks the Close method.
	CloseFunc func(ctx context.Context) error

	// ProduceReindexRequestedFunc mocks the ProduceReindexRequested method.
	ProduceReindexRequestedFunc func(ctx context.Context, event models.ReindexRequested) error

	// calls tracks calls to the methods.
	calls struct {
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// State is the state argument value.
			State *healthcheck.CheckState
		}
		// Close holds details about calls to the Close method.
		Close []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ProduceReindexRequested holds details about calls to the ProduceReindexRequested method.
		ProduceReindexRequested []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Event is the event argument value.
			Event models.ReindexRequested
		}
	}
}

// Checker calls CheckerFunc.
func (mock *KafkaProducerMock) Checker(ctx context.Context, state *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("KafkaProducerMock.CheckerFunc: method is nil but KafkaProducer.Checker was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}{
		Ctx:   ctx,
		State: state,
	}
	lockKafkaProducerMockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	lockKafkaProducerMockChecker.Unlock()
	return mock.CheckerFunc(ctx, state)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedKafkaProducer.CheckerCalls())
func (mock *KafkaProducerMock) CheckerCalls() []struct {
	Ctx   context.Context
	State *healthcheck.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}
	lockKafkaProducerMockChecker.RLock()
	calls = mock.calls.Checker
	lockKafkaProducerMockChecker.RUnlock()
	return calls
}

// Close calls CloseFunc.
func (mock *KafkaProducerMock) Close(ctx context.Context) error {
	if mock.CloseFunc == nil {
		panic("KafkaProducerMock.CloseFunc: method is nil but KafkaProducer.Close was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockKafkaProducerMockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	lockKafkaProducerMockClose.Unlock()
	return mock.CloseFunc(ctx)
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedKafkaProducer.CloseCalls())
func (mock *KafkaProducerMock) CloseCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockKafkaProducerMockClose.RLock()
	calls = mock.calls.Close
	lockKafkaProducerMockClose.RUnlock()
	return calls
}

// ProduceReindexRequested calls ProduceReindexRequestedFunc.
func (mock *KafkaProducerMock) ProduceReindexRequested(ctx context.Context, event models.ReindexRequested) error {
	if mock.ProduceReindexRequestedFunc == nil {
		panic("KafkaProducerMock.ProduceReindexRequestedFunc: method is nil but KafkaProducer.ProduceReindexRequested was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Event models.ReindexRequested
	}{
		Ctx:   ctx,
		Event: event,
	}
	lockKafkaProducerMockProduceReindexRequested.Lock()
	mock.calls.ProduceReindexRequested = append(mock.calls.ProduceReindexRequested, callInfo)
	lockKafkaProducerMockProduceReindexRequested.Unlock()
	return mock.ProduceReindexRequestedFunc(ctx, event)
}

// ProduceReindexRequestedCalls gets all the calls that were made to ProduceReindexRequested.
// Check the length with:
//     len(mockedKafkaProducer.ProduceReindexRequestedCalls())
func (mock *KafkaProducerMock) ProduceReindexRequestedCalls() []struct {
	Ctx   context.Context
	Event models.ReindexRequested
} {
	var calls []struct {
		Ctx   context.Context
		Event models.ReindexRequested
	}
	lockKafkaProducerMockProduceReindexRequested.RLock()
	calls = mock.calls.ProduceReindexRequested
	lockKafkaProducerMockProduceReindexRequested.RUnlock()
	return calls
}
