// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"github.com/ONSdigital/dp-search-reindex-api/models"
	"github.com/ONSdigital/dp-search-reindex-api/service"
	"sync"
)

// Ensure, that MongoJobStorerMock does implement service.MongoJobStorer.
// If this is not the case, regenerate this file with moq.
var _ service.MongoJobStorer = &MongoJobStorerMock{}

// MongoJobStorerMock is a mock implementation of service.MongoJobStorer.
//
// 	func TestSomethingThatUsesMongoJobStorer(t *testing.T) {
//
// 		// make and configure a mocked service.MongoJobStorer
// 		mockedMongoJobStorer := &MongoJobStorerMock{
// 			AcquireJobLockFunc: func(ctx context.Context, id string) (string, error) {
// 				panic("mock out the AcquireJobLock method")
// 			},
// 			CheckerFunc: func(ctx context.Context, state *healthcheck.CheckState) error {
// 				panic("mock out the Checker method")
// 			},
// 			CloseFunc: func(ctx context.Context) error {
// 				panic("mock out the Close method")
// 			},
// 			CreateJobFunc: func(ctx context.Context, id string) (models.Job, error) {
// 				panic("mock out the CreateJob method")
// 			},
// 			CreateTaskFunc: func(ctx context.Context, jobID string, nameOfApi string, numDocuments int) (models.Task, error) {
// 				panic("mock out the CreateTask method")
// 			},
// 			GetJobFunc: func(ctx context.Context, id string) (models.Job, error) {
// 				panic("mock out the GetJob method")
// 			},
// 			GetJobsFunc: func(ctx context.Context, offsetParam string, limitParam string) (models.Jobs, error) {
// 				panic("mock out the GetJobs method")
// 			},
// 			PutNumberOfTasksFunc: func(ctx context.Context, id string, count int) error {
// 				panic("mock out the PutNumberOfTasks method")
// 			},
// 			UnlockJobFunc: func(lockID string) error {
// 				panic("mock out the UnlockJob method")
// 			},
// 		}
//
// 		// use mockedMongoJobStorer in code that requires service.MongoJobStorer
// 		// and then make assertions.
//
// 	}
type MongoJobStorerMock struct {
	// AcquireJobLockFunc mocks the AcquireJobLock method.
	AcquireJobLockFunc func(ctx context.Context, id string) (string, error)

	// CheckerFunc mocks the Checker method.
	CheckerFunc func(ctx context.Context, state *healthcheck.CheckState) error

	// CloseFunc mocks the Close method.
	CloseFunc func(ctx context.Context) error

	// CreateJobFunc mocks the CreateJob method.
	CreateJobFunc func(ctx context.Context, id string) (models.Job, error)

	// CreateTaskFunc mocks the CreateTask method.
	CreateTaskFunc func(ctx context.Context, jobID string, nameOfApi string, numDocuments int) (models.Task, error)

	// GetJobFunc mocks the GetJob method.
	GetJobFunc func(ctx context.Context, id string) (models.Job, error)

	// GetJobsFunc mocks the GetJobs method.
	GetJobsFunc func(ctx context.Context, offsetParam string, limitParam string) (models.Jobs, error)

	// PutNumberOfTasksFunc mocks the PutNumberOfTasks method.
	PutNumberOfTasksFunc func(ctx context.Context, id string, count int) error

	// UnlockJobFunc mocks the UnlockJob method.
	UnlockJobFunc func(lockID string) error

	// calls tracks calls to the methods.
	calls struct {
		// AcquireJobLock holds details about calls to the AcquireJobLock method.
		AcquireJobLock []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// State is the state argument value.
			State *healthcheck.CheckState
		}
		// Close holds details about calls to the Close method.
		Close []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// CreateJob holds details about calls to the CreateJob method.
		CreateJob []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// CreateTask holds details about calls to the CreateTask method.
		CreateTask []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// JobID is the jobID argument value.
			JobID string
			// NameOfApi is the nameOfApi argument value.
			NameOfApi string
			// NumDocuments is the numDocuments argument value.
			NumDocuments int
		}
		// GetJob holds details about calls to the GetJob method.
		GetJob []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetJobs holds details about calls to the GetJobs method.
		GetJobs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// OffsetParam is the offsetParam argument value.
			OffsetParam string
			// LimitParam is the limitParam argument value.
			LimitParam string
		}
		// PutNumberOfTasks holds details about calls to the PutNumberOfTasks method.
		PutNumberOfTasks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// Count is the count argument value.
			Count int
		}
		// UnlockJob holds details about calls to the UnlockJob method.
		UnlockJob []struct {
			// LockID is the lockID argument value.
			LockID string
		}
	}
	lockAcquireJobLock   sync.RWMutex
	lockChecker          sync.RWMutex
	lockClose            sync.RWMutex
	lockCreateJob        sync.RWMutex
	lockCreateTask       sync.RWMutex
	lockGetJob           sync.RWMutex
	lockGetJobs          sync.RWMutex
	lockPutNumberOfTasks sync.RWMutex
	lockUnlockJob        sync.RWMutex
}

// AcquireJobLock calls AcquireJobLockFunc.
func (mock *MongoJobStorerMock) AcquireJobLock(ctx context.Context, id string) (string, error) {
	if mock.AcquireJobLockFunc == nil {
		panic("MongoJobStorerMock.AcquireJobLockFunc: method is nil but MongoJobStorer.AcquireJobLock was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockAcquireJobLock.Lock()
	mock.calls.AcquireJobLock = append(mock.calls.AcquireJobLock, callInfo)
	mock.lockAcquireJobLock.Unlock()
	return mock.AcquireJobLockFunc(ctx, id)
}

// AcquireJobLockCalls gets all the calls that were made to AcquireJobLock.
// Check the length with:
//     len(mockedMongoJobStorer.AcquireJobLockCalls())
func (mock *MongoJobStorerMock) AcquireJobLockCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockAcquireJobLock.RLock()
	calls = mock.calls.AcquireJobLock
	mock.lockAcquireJobLock.RUnlock()
	return calls
}

// Checker calls CheckerFunc.
func (mock *MongoJobStorerMock) Checker(ctx context.Context, state *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("MongoJobStorerMock.CheckerFunc: method is nil but MongoJobStorer.Checker was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}{
		Ctx:   ctx,
		State: state,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(ctx, state)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedMongoJobStorer.CheckerCalls())
func (mock *MongoJobStorerMock) CheckerCalls() []struct {
	Ctx   context.Context
	State *healthcheck.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// Close calls CloseFunc.
func (mock *MongoJobStorerMock) Close(ctx context.Context) error {
	if mock.CloseFunc == nil {
		panic("MongoJobStorerMock.CloseFunc: method is nil but MongoJobStorer.Close was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc(ctx)
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedMongoJobStorer.CloseCalls())
func (mock *MongoJobStorerMock) CloseCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// CreateJob calls CreateJobFunc.
func (mock *MongoJobStorerMock) CreateJob(ctx context.Context, id string) (models.Job, error) {
	if mock.CreateJobFunc == nil {
		panic("MongoJobStorerMock.CreateJobFunc: method is nil but MongoJobStorer.CreateJob was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockCreateJob.Lock()
	mock.calls.CreateJob = append(mock.calls.CreateJob, callInfo)
	mock.lockCreateJob.Unlock()
	return mock.CreateJobFunc(ctx, id)
}

// CreateJobCalls gets all the calls that were made to CreateJob.
// Check the length with:
//     len(mockedMongoJobStorer.CreateJobCalls())
func (mock *MongoJobStorerMock) CreateJobCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockCreateJob.RLock()
	calls = mock.calls.CreateJob
	mock.lockCreateJob.RUnlock()
	return calls
}

// CreateTask calls CreateTaskFunc.
func (mock *MongoJobStorerMock) CreateTask(ctx context.Context, jobID string, nameOfApi string, numDocuments int) (models.Task, error) {
	if mock.CreateTaskFunc == nil {
		panic("MongoJobStorerMock.CreateTaskFunc: method is nil but MongoJobStorer.CreateTask was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		JobID        string
		NameOfApi    string
		NumDocuments int
	}{
		Ctx:          ctx,
		JobID:        jobID,
		NameOfApi:    nameOfApi,
		NumDocuments: numDocuments,
	}
	mock.lockCreateTask.Lock()
	mock.calls.CreateTask = append(mock.calls.CreateTask, callInfo)
	mock.lockCreateTask.Unlock()
	return mock.CreateTaskFunc(ctx, jobID, nameOfApi, numDocuments)
}

// CreateTaskCalls gets all the calls that were made to CreateTask.
// Check the length with:
//     len(mockedMongoJobStorer.CreateTaskCalls())
func (mock *MongoJobStorerMock) CreateTaskCalls() []struct {
	Ctx          context.Context
	JobID        string
	NameOfApi    string
	NumDocuments int
} {
	var calls []struct {
		Ctx          context.Context
		JobID        string
		NameOfApi    string
		NumDocuments int
	}
	mock.lockCreateTask.RLock()
	calls = mock.calls.CreateTask
	mock.lockCreateTask.RUnlock()
	return calls
}

// GetJob calls GetJobFunc.
func (mock *MongoJobStorerMock) GetJob(ctx context.Context, id string) (models.Job, error) {
	if mock.GetJobFunc == nil {
		panic("MongoJobStorerMock.GetJobFunc: method is nil but MongoJobStorer.GetJob was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetJob.Lock()
	mock.calls.GetJob = append(mock.calls.GetJob, callInfo)
	mock.lockGetJob.Unlock()
	return mock.GetJobFunc(ctx, id)
}

// GetJobCalls gets all the calls that were made to GetJob.
// Check the length with:
//     len(mockedMongoJobStorer.GetJobCalls())
func (mock *MongoJobStorerMock) GetJobCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetJob.RLock()
	calls = mock.calls.GetJob
	mock.lockGetJob.RUnlock()
	return calls
}

// GetJobs calls GetJobsFunc.
func (mock *MongoJobStorerMock) GetJobs(ctx context.Context, offsetParam string, limitParam string) (models.Jobs, error) {
	if mock.GetJobsFunc == nil {
		panic("MongoJobStorerMock.GetJobsFunc: method is nil but MongoJobStorer.GetJobs was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		OffsetParam string
		LimitParam  string
	}{
		Ctx:         ctx,
		OffsetParam: offsetParam,
		LimitParam:  limitParam,
	}
	mock.lockGetJobs.Lock()
	mock.calls.GetJobs = append(mock.calls.GetJobs, callInfo)
	mock.lockGetJobs.Unlock()
	return mock.GetJobsFunc(ctx, offsetParam, limitParam)
}

// GetJobsCalls gets all the calls that were made to GetJobs.
// Check the length with:
//     len(mockedMongoJobStorer.GetJobsCalls())
func (mock *MongoJobStorerMock) GetJobsCalls() []struct {
	Ctx         context.Context
	OffsetParam string
	LimitParam  string
} {
	var calls []struct {
		Ctx         context.Context
		OffsetParam string
		LimitParam  string
	}
	mock.lockGetJobs.RLock()
	calls = mock.calls.GetJobs
	mock.lockGetJobs.RUnlock()
	return calls
}

// PutNumberOfTasks calls PutNumberOfTasksFunc.
func (mock *MongoJobStorerMock) PutNumberOfTasks(ctx context.Context, id string, count int) error {
	if mock.PutNumberOfTasksFunc == nil {
		panic("MongoJobStorerMock.PutNumberOfTasksFunc: method is nil but MongoJobStorer.PutNumberOfTasks was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		ID    string
		Count int
	}{
		Ctx:   ctx,
		ID:    id,
		Count: count,
	}
	mock.lockPutNumberOfTasks.Lock()
	mock.calls.PutNumberOfTasks = append(mock.calls.PutNumberOfTasks, callInfo)
	mock.lockPutNumberOfTasks.Unlock()
	return mock.PutNumberOfTasksFunc(ctx, id, count)
}

// PutNumberOfTasksCalls gets all the calls that were made to PutNumberOfTasks.
// Check the length with:
//     len(mockedMongoJobStorer.PutNumberOfTasksCalls())
func (mock *MongoJobStorerMock) PutNumberOfTasksCalls() []struct {
	Ctx   context.Context
	ID    string
	Count int
} {
	var calls []struct {
		Ctx   context.Context
		ID    string
		Count int
	}
	mock.lockPutNumberOfTasks.RLock()
	calls = mock.calls.PutNumberOfTasks
	mock.lockPutNumberOfTasks.RUnlock()
	return calls
}

// UnlockJob calls UnlockJobFunc.
func (mock *MongoJobStorerMock) UnlockJob(lockID string) error {
	if mock.UnlockJobFunc == nil {
		panic("MongoJobStorerMock.UnlockJobFunc: method is nil but MongoJobStorer.UnlockJob was just called")
	}
	callInfo := struct {
		LockID string
	}{
		LockID: lockID,
	}
	mock.lockUnlockJob.Lock()
	mock.calls.UnlockJob = append(mock.calls.UnlockJob, callInfo)
	mock.lockUnlockJob.Unlock()
	return mock.UnlockJobFunc(lockID)
}

// UnlockJobCalls gets all the calls that were made to UnlockJob.
// Check the length with:
//     len(mockedMongoJobStorer.UnlockJobCalls())
func (mock *MongoJobStorerMock) UnlockJobCalls() []struct {
	LockID string
} {
	var calls []struct {
		LockID string
	}
	mock.lockUnlockJob.RLock()
	calls = mock.calls.UnlockJob
	mock.lockUnlockJob.RUnlock()
	return calls
}
