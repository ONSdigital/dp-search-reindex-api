swagger: "2.0"

info:
  title: dp-search-reindex-api
  description: "Provides details about search reindex jobs and enables creation and running of them."
  version: 1.0.0
  license:
    name: "Open Government Licence v3.0"
    url: "http://www.nationalarchives.gov.uk/doc/open-government-licence/version/3/"

basePath: "/v1"

schemes:
  - http

tags:
  - name: "Private User"

paths:

  /health:
    get:
      tags:
        - Public
      summary: "Get health of Search Reindex API."
      description:
        "Returns health information of Search Reindex API and list of the health of its dependent services."
      produces:
        - "application/json"
      responses:
        200:
          description: "Health information and list of dependent services health."
          schema:
            $ref: "#/definitions/Health"
        500:
          $ref: '#/responses/InternalError'

  /jobs/{id}:
    get:
      tags:
        - "Private User"
      summary: Get a specific job.
      description: "Get the specific search reindex job that has the id given in the path."
      parameters:
        - $ref: "#/parameters/id"
      produces:
        - application/json
      responses:
        200:
          description: "Successfully returned a job for the given id."
          schema:
            $ref: "#/definitions/GetReturnJob"
        500:
          $ref: "#/responses/InternalError"
        404:
          $ref: "#/responses/ResourceNotFound"

  /jobs:
    get:
      tags:
        - "Private User"
      summary: Get a list of jobs.
      description: "Get a list of search reindex jobs that meet the criteria specified by the four query parameters."
      parameters:
        - $ref: "#/parameters/limit"
        - $ref: "#/parameters/offset"
        - $ref: "#/parameters/sort"
        - $ref: "#/parameters/state"
      produces:
        - application/json
      responses:
        200:
          description: "Successfully returned the requested list of jobs."
          schema:
            $ref: "#/definitions/Jobs"
        400:
          $ref: "#/responses/InvalidRequest"
        500:
          $ref: "#/responses/InternalError"
    post:
      tags:
        - "Private User"
      summary: Create a new search reindex job.
      description: "Request a new search reindex job and receive the new Job resource created in response."
      produces:
        - application/json
      responses:
        201:
          description: "Successfully created a new search reindex job."
          schema:
            $ref: "#/definitions/PostReturnJob"
        409:
          $ref: "#/responses/Conflict"
        500:
          $ref: "#/responses/InternalError"

  /jobs/{id}/number_of_tasks/{count}:
    put:
      tags:
        - "Private System"
      summary: "Update the number of tasks on a reindex job resource."
      description: "Update the number of tasks field, with the provided count, for the job specified by the provided id."
      produces:
        - "application/json"
      parameters:
        - $ref: '#/parameters/id'
        - $ref: '#/parameters/count'
      responses:
        200:
          description: "Successfully updated number of tasks."
        400:
          description: |
            Invalid request, reasons can be one of the following:
              * invalid id
              * empty or invalid count e.g. not a positive integer
        404:
          $ref: '#/responses/ResourceNotFound'
        500:
          $ref: '#/responses/InternalError'

  /jobs/{id}/tasks:
    post:
      tags:
        - "Private System"
      summary: "Create task."
      description: "Create task for a given reindex job. Endpoint only used by backend service in publishing mode."
      consumes:
        - application/json
      produces:
        - "application/json"
      parameters:
        - $ref: '#/parameters/id'
        - $ref: '#/parameters/create_task'
      responses:
        201:
          description: "Successfully created a new task (or overwritten an existing one)."
          schema:
            $ref: "#/definitions/Task"
        404:
          $ref: '#/responses/ResourceNotFound'
        500:
          $ref: "#/responses/InternalError"

  /jobs/{id}/tasks/{task_name}:
    get:
      tags:
        - "Private User"
      summary: "Get a specific task."
      description: "Get a specific task for a given reindex job."
      produces:
        - "application/json"
      parameters:
        - $ref: '#/parameters/id'
        - $ref: '#/parameters/task_name'
      responses:
        200:
          description: "Successfully returned task, with the given job_id and task_name."
          schema:
            $ref: "#/definitions/Task"
        404:
            $ref: '#/responses/ResourceNotFound'
        500:
            $ref: "#/responses/InternalError"

responses:

  InternalError:
    description: "Failed to process the request due to an internal error."

  ResourceNotFound:
    description: "Requested resource could not be found."

  InvalidRequest:
    description: "The request does not contain the correct parameters and/or values in its parameters."

  Conflict:
    description: "The request could not be completed due to a conflict with the current state of the Job Store."

definitions:

  BaseJob:
    type: object
    description: "A basic search reindex job object that contains the minimum set of properties. The information it contains is to be used by the developer who creates the Job, which is to replace an existing elastic search index with a new one."
    required:
      - "id"
      - "last_updated"
      - "links"
      - "reindex_started"
      - "state"
      - "total_inserted_search_documents"
    properties:
      id:
        type: string
        description: "A unique identifier for this specific search reindex job."
      last_updated:
        type: string
        format: date-time
        description: "A ISO8601 timestamp representing the last time the resource was updated."
        example: "2021-03-18T09:03:41+0000"
      links:
        type: object
        description: "Links that can be used to get the details of the Job (self) or of its tasks."
        required:
          - "tasks"
          - "self"
        properties:
          tasks:
            type: string
            format: http://localhost:<port>/jobs/{id}/tasks
            example: http://localhost:12150/jobs/abc123/tasks
          self:
            type: string
            format: http://localhost:<port>/jobs/{id}
            example: http://localhost:12150/jobs/abc123
      reindex_failed:
        type: string
        format: date-time
        description: "A ISO8601 timestamp representing the date and time when the reindex job failed."
        example: "2021-03-18T09:03:41+0000"
      reindex_started:
        type: string
        format: date-time
        description: "A ISO8601 timestamp representing the date and time when the reindex job was started."
        example: "2021-03-18T09:03:41+0000"
      search_index_name:
        type: string
        description: "The name of the search index to be recreated by this search reindex job."
      state:
        type: string
        description: "The current state of this search reindex job."
        example: "created"
        enum:
          - created
          - in-progress
          - completed
          - failed
      total_inserted_search_documents:
        type: integer
        description: "The total number of documents inserted into the new search index for a reindex job."

  PostReturnJob:
    allOf:
      - $ref: "#/definitions/BaseJob"
    type: "object"
    description: "A search reindex job that extends the basic one by adding search_index_name to the list of required properties. The information it contains is to be used by the developer who creates the Job, which is to replace an existing elastic search index with a new one."
    required:
      - "search_index_name"

  GetReturnJob:
    allOf:
      - $ref: "#/definitions/BaseJob"
    type: "object"
    description: "A search reindex job that extends the basic one by adding properties named number_of_tasks, total_search_documents, and reindex_completed. The information it contains is to be used by the developer who creates the Job, which is to replace an existing elastic search index with a new one."
    properties:
      number_of_tasks:
        type: integer
        description: "The number of tasks that are part of this search reindex job."
      reindex_completed:
        type: string
        format: date-time
        description: "A ISO8601 timestamp representing the date and time when the reindex job was completed."
        example: "2021-03-18T09:03:41+0000"
      total_search_documents:
        type: integer
        description: "The total number of documents that are held within the search index in question."

  Jobs:
    type: object
    description: "A list of Job resources held in an array."
    required:
      - "count"
      - "items"
      - "total_count"
      - "limit"
      - "offset"
      - "sort"
    properties:
      count:
        type: integer
        description: "The number of Job resources in the list."
        example: 25
      items:
        type: array
        description: "The actual list that contains the Job resources."
        items:
          $ref: "#/definitions/GetReturnJob"
      limit:
        type: integer
        description: "The max number of Job resources we're returning in this response. The default is 20."
        example: 35
      offset:
        type: integer
        description: "The number of Job resources into the full list that this particular response is starting at. The default is 0."
        example: 10
      total_count:
        type: integer
        description: "How many total items there may be (so the full list size, maybe thousands)."
        example: 100
      sort:
        type: string
        description: "The sort order of the list."
        example: number_of_tasks
      state:
        type: string
        description: "The current state(s) of the Job resources in the list."
        example: "created"

  Health:
    type: object
    properties:
      status:
        type: string
        description: "The status of the Search Reindex API."
        enum: [ "OK", "WARNING", "CRITICAL" ]
      version:
        type: object
        properties:
          build_time:
            type: string
            description: "The build date and time of the Search Reindex API."
            example: "2020-06-11T12:49:20+01:00"
          git_commit:
            type: string
            description: "The git commit hash of the Search Reindex API."
            example: "7c2febbf2b818175112478d4ffbadbee1b654f63"
          language:
            type: string
            description: "The programming language used to implement Search Reindex API."
            example: "go"
          language_version:
            type: string
            description: "The version of the programming language used to implement Search Reindex API."
            example: "go1.16.3"
          version:
            type: string
            description: "The version of Search Reindex API."
            example: "1.0.0"
      uptime:
        type: string
        description: "The uptime of Search Reindex API."
        example: "34516"
      start_time:
        type: string
        description: "The start date and time of Search Reindex API running."
        example: "2020-06-11T11:49:21.520922Z"
      checks:
        type: array
        items:
          $ref: '#/definitions/HealthChecker'

  HealthChecker:
    type: object
    properties:
      name:
        type: string
        description: "The name of external service used by API."
        example: "Mongo DB"
      status:
        type: string
        description: "The status of the external service."
        enum: [ "OK", "WARNING", "CRITICAL" ]
      message:
        type: string
        description: "The message status of the external service."
        example: "mongodb is OK and all expected collections exist"
      last_checked:
        type: string
        description: "The last health check date and time of the external service."
        example: "2020-06-11T11:49:50.330089Z"
      last_success:
        type: string
        description: "The last successful health check date and time of the external service."
        example: "2020-06-11T11:49:50.330089Z"
      last_failure:
        type: string
        description: "The last failed health check date and time of the external service."
        example: null

  Task:
    type: object
    description: "A task is part of a job (one job can consist of many tasks). A task usually involves adding a number of documents to a search index."
    required:
      - "job_id"
      - "last_updated"
      - "links"
      - "number_of_documents"
      - "task_name"
    properties:
      job_id:
        type: string
        description: "The id of the job that the task is associated with."
        example: "883c81fd-726d-4ea3-9db8-7e7c781a01cc"
      last_updated:
        type: string
        format: date-time
        description: "A ISO8601 timestamp representing the last time the task was updated."
        example: "2021-03-18T09:03:41+0000"
      links:
        type: object
        description: "Links that can be used to get the details of the task (self) or of the associated job."
        required:
          - "self"
          - "job"
        properties:
          self:
            type: string
            format: http://localhost:<port>/jobs/{id}/tasks/{task_name}
            example: http://localhost:12150/jobs/abc123/tasks/dp-dataset-api
          job:
            type: string
            format: http://localhost:<port>/jobs/{id}
            example: http://localhost:12150/jobs/abc123
      number_of_documents:
        type: integer
        description: "Number of documents that would need to be added to search index for the task."
        example: 1
      task_name:
        type: string
        description: "Name of API (service) that the reindex job will need to retrieve some data from to upload into search index."
        enum:
          - dataset-api
          - zebedee

parameters:

  id:
    name: id
    description: The id of a search reindex job (Job.id).
    in: path
    required: true
    type: string

  limit:
    name: limit
    description: The maximum number of Job resources we're returning in this Jobs resource. The default limit is 20.
    in: query
    type: integer
    default: 20

  offset:
    name: offset
    description: The number of Job objects into the full list that this particular response is starting at. The default number to start at is 0.
    in: query
    type: integer
    default: 0

  sort:
    name: sort
    description: The sort order in which to return a list of reindex job resources. This defaults to last_updated in ascending order.
    in: query
    type: string
    default: last_updated

  state:
    name: state
    description: The resulting list of items filtered by the values in state array. This field resembles the list of states set on request.
    in: query
    type: array
    items:
      type: string

  count:
    name: count
    description: Number of tasks that the job contains.
    in: path
    required: true
    type: integer

  create_task:
    in: body
    name: task_to_create
    description: The task to create.
    schema:
      type: object
      required:
        - task
        - number_of_documents
      properties:
        task_name:
          description: Name of API (service) that the reindex job will need to retrieve some data from to upload into search index.
          type: string
          enum:
            - dataset-api
            - zebedee
        number_of_documents:
          description: Number of documents that will need to be added to search index for the task.
          type: integer
          example: 1

  task_name:
    name: task_name
    description: The name of a specific task relating to a search reindex job.
    in: path
    required: true
    type: string
    enum:
      - dataset-api
      - zebedee
